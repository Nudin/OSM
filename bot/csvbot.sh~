#!/bin/bash
IFS="
"
### ToDo ###
#
# fix help()
# exclude name and pw
# more BBoX/Area-Support
# test if "Frankurt/M" is still open
# escape special characters
# Remove Duppletags instead of ignoreing
# way-Support
# much more

curlsilent=""	# '-s' for making curl silent
wgetsilent=""	# '-nv' for making curl silent
dry=0		# if 1: Don't write anything to the server, use 666 as changset-nr.
download=1	# if 0: Don't download the nodelist, but instead use exising one
clean=1		# if 0: Din't remove file at fin
comment=""	# Editing-Comment
file="allnodes" # The filename used for the nodefile
yes=0


user=Pirat\ Michi
pw=Bluthund

bbox=""			# BBox-Koordinates
#dont[0]=""		# For use of '*' as value: If this is in the oldvalue, don't edit. (regex)

startlog()
 {
 echo -en "\n" >> logfile.csv
 }
log()
 {
 if [ "$1" = "-q" ] ; then
	shift
 else
	echo "$@" | tail -c +3
 fi
 for ((t=0; t<$1; t++)) ; do
	echo -en "\t" >> logfile.csv
 done
 shift
 for i ; do
	echo -en "$i\t" >> logfile.csv
 done
 }

help()	# Print out help-Text
 {
 echo -e "csvbot [-dcsh]  [-f file]"
 echo -e "\t-y t\t\talways answer yes"
 echo -e "\t-c text\t\tset editingcomment manual"
 echo -e "\t-a area\t\tedit only in given area"
 echo -e "\t-s\t\tMake curl to be silent"
 echo -e "\t-d\t\tdry run - don't change anything, just simulate"
 echo -e "\t-f file\t\tDon't download nodelist, but use file instead"
 echo -e "\t-e\t\tDon't erase the nodelist"
 echo -e "\t-h\t\tDisplay this help"
 exit
 }

# Download from XAPI 
XAPIdownload()	# $1: query $2:filename
 {
 api_url=("http://www.informationfreeway.org/api/0.6/" "http://xapi.openstreetmap.org/api/0.6/" "http://osmxapi.hypercube.telascience.org/api/0.6/" "http://osm.bearstech.com/osmxapi/api/0.6/")

 for (( i=0; i<${#api_url[*]}; i++ )) ; do
echo "wget $wgetsilent \"${api_url[$i]}$1\" -O $2"
	wget $wgetsilent "${api_url[$i]}$1" -O $2
	if [ $? -eq 0 ]; then break; else echo "Trying next Server" ; fi
	if [ $i -eq $(expr ${#api_url[*]} "-" 1) ]; then log 2 "No xapi-Server working" ; return 1; fi
 done

 }
put()	# $1: url $2 file
{
curl $curlsilent --basic -u $user:$pw -i -X PUT -H "Content-Type: application/xml; charset=utf-8" -d @"$2" $1
}
get()	# $1: url $2 file
{
curl $curlsilent -X GET $1 > $2
}


# Use a predefined bbox-area
usearea()
 {
 case $1 in
  muc) bbox="11.47453,48.09138,11.66748,48.18257";;
  Muc) bbox="11.45187,48.06982,11.69357,48.20180";;
  MUC) bbox="11.19781,48.03035,11.81717,48.26126";;
  gern) bbox="11.51916,48.15755,11.53187,48.16694";;
  altstadt) bbox="11.56599,48.13385,11.58440,48.14158";;
  bayern) warn; bbox="9.42627,47.28668,13.75488,50.54834";;
  bawü) warn; bbox="7.4597168,47.3983492,10.7116699,50.4575040";;
  berlin) bbox="13.1451416,52.3168743,13.6944580,52.6730514";;
  ostd) bbox="10.8984375,50.3314363,14.7106934,54.2395505";;
  ger) warn; bbox="6.15234,47.45781,13.79883,54.26522";;
  vorarlberg) warn; bbox="9.6405029,46.7962990,10.6539917,47.6468870";; # guessed
  tirol) warn; bbox="10.5139160,46.7662059,12.7880859,47.6320819";; # guessed
  wien) bbox="16.2130737,48.0881707,16.5701294,48.3115146";; # groß
  [?]) help;;
 esac
 }

### Check script-arguments ###
while getopts "df:ec:a:shy" optionName; do
 case "$optionName" in
  d) dry=1;;
  f) download=0;file="$OPTARG";;
  s) curlsilent="-s";wgetsilent="-nv";;
  e) clean=0;;
  c) comment="$OPTARG";;
  a) usearea $OPTARG;;
  y) yes=1;;
  h) help;;
  [?]) help;;
 esac
done
shift `expr $OPTIND - 1`

simpelbot()
{
	key=$1
	searchvalue=$2
	newkey=$3
	newvalue=$4

	# Generate value - we have to use this, because xapi expects '*' while sed expects regex 
	if [ "$searchvalue" = '*' ] ; then
		value=".*"
	else
		value=$searchvalue
	fi
	searchvalue=$(echo $searchvalue | sed 's/\//\\\//g')

	# Generate BBox-code, if bbox is given
	if [ "$bbox" != "" ] ; then
		bboxcode="[bbox=$bbox]"
	fi
	# Generate Comment, if not given.
	if [ "$comment" = "" ] ; then
		comment="Bot: changing $key=$value to $newkey=$newvalue"
	fi
	comment=$(echo "$comment" | sed 's/\//\\\//g')

	# Write Log-File
	log -q 0 "$(date '+%Y-%m-%d %T')"
	log -q 0 "$key" "$value" "$newkey" "$newvalue"

	# Asking if realy to start
	if [ $yes -eq 0 ] ; then
		echo -en '\e[1m'
		echo "Going to change $key=$value to $newkey=$newvalue"
		echo -en '\e[0m'
		echo -e "Do you realy want to do this? (\e[1my\e[0mes/\e[1mn\e[0mext/\e[1ma\e[0mbort)"
		read rly
		if [ "$( echo $rly | grep n)" != "" ]  ; then log 2 "skipping.." ; return 1 ; fi
		if [ "$( echo $rly | grep a)" != "" ]  ; then log 2 "aborting, by" ; exit ; fi
		if [ "$( echo $rly | tr 'j' 'y' | grep y)" = "" ]  ; then echo "Wrong input, interpreting as abort" ; exit ; fi
	fi

	# Write comment to Changesetfile
	less changset.bot | sed "s/@@@/$comment/g" > mychangset
	if [ $? -ne 0 ] ; then log 2 "Error setting comment; aborting"; return 7 ; fi

	# Download Node-list
	if [ $download -eq 1 ] ; then
		XAPIdownload "node[${key}=${searchvalue}]$bboxcode" "$file"
	fi
	number=$(less $file | grep "<node id='" | wc -l )
	if [ $number -eq 0 ] ; then # If there ist nothing to edit, exit
	 log 2 "Suchausdruck nicht gefunden. Nichts weiter zu tun"
	 rm $file
	 return 2
	else
	 echo -e "### Starting editing" $number "nodes ### \n"
	 log -q 0 "$number"
	fi

	# Create Changset
	if [ $dry -eq 0 ] ; then
		changeset=$(put "http://api.openstreetmap.org/api/0.6/changeset/create" "mychangset" | tail -c 7)
		if [ $? -ne 0 ] ; then log 1 "Error creating changset."; return 3 ; fi
	else
		changeset="666"
	fi
	echo -en "#changeset: "; log 0 "$changeset"


	#####		 Start Loop: 		#####
	##### Edit and upload every single node	#####
	for id in $(less $file | grep "<node id='" | cut -d\' -f 2); do
		echo -e "ID: $id"

		#Download node
		get "http://api.openstreetmap.org/api/0.6/node/$id" "node$id"

		# Get oldvalue, prepare newvalue, etc
		oldvalue=$(less node$id | grep "<tag k=\"$key\"" | cut -d\" -f 4)
		if [ "$newvalue" = "*" ] ; then
			newvaluefixed=$(echo $oldvalue | sed 's/\//\\\//g')
		else
			newvaluefixed=$(echo "$newvalue" | sed 's/\//\\\//g')
		fi

		#Filter unwanted Tags
		for (( i=0; i<${#dont[*]}; i++ )) ; do
		 if [ "$( echo $oldvalue | grep "${dont[$i]}" )" != "" ] ; then
			echo "Don't modify'"
			rm node$id
			continue
		 fi
		done

		# Filter dupple-taged elements.
		if [ "$key" != "$newkey" ] ; then
		 if [ $(less node$id | grep -c "<tag k=\"$newkey\" v=\"$newvaluefixed\"/>") -gt 0 ] ; then
			echo "Skipping Dupple entry."
			rm node$id
			continue
		 elif [ $(less node$id | grep -c "<tag k=\"$newkey\" v=\"") -gt 0 ] ; then
			echo "Skipping rival tags"
			rm node$id
			continue
		fi fi

		#Write changeset to file 
		less node$id | sed "s/changeset=\"[0-9]*\"/changeset=\"$changeset\"/g" > node2
		if [ $? -ne 0 ] ; then log 0 "Error setting changesetnumber; aborting"; return 4 ; fi
		mv node2 node$id

		#Edit
		less node$id | sed "s/<tag k=\"$key\" v=\"$value\"\/>/<tag k=\"$newkey\" v=\"$newvaluefixed\"\/>/g" > node2
		if [ $? -ne 0 ] ; then log 0 "Error editing node; aborting"; return 5 ; fi
		diff --brief node2 node$id > /dev/null
		if [ $? -eq 0 ] ; then
			log 0 "Nothig to change/changing didn't worked out."
			rm node2 node$id
			continue
		elif [ $? -eq 1 ] ; then
			mv node2 node$id
		else
			log 0 "Something strage occured. Exiting"
			return 6
		fi

		#Upload Node
		if [ $dry -eq 0 ] ; then
			put "http://api.openstreetmap.org/api/0.6/node/$id" "node$id" | if [ "$curlsilent" = "-s" ] ; then grep "Status:"; else grep '' ; fi
		else
			echo -e "\nDon't 'Upload\n"
		fi

		rm node$id
	done

	#Close Chngeset
	echo -e "\nClean Up\n"
	if [ $dry -eq 0 ] ; then
		put "http://api.openstreetmap.org/api/0.6/changeset/$changeset/close" "mychangset" | if [ "$curlsilent" = "-s" ] ; then grep "Status:"; else grep '' ; fi
	fi
	if [ $dry -eq 1 ] ; then
	log 0 "Dry-Mode. Don't upload anything'"
	fi
	#Remove files
	if [ $clean -eq 1 ] ; then
		rm $file
		rm mychangset
	fi
}

######### Start of script ##########
### Scan CSV-File and apply rule ###
####################################
lines=$(less filter.csv | grep -v '#' | grep -v '^\W*$' | sort | uniq | wc -l)
for (( n=1; n<$lines; n++ )) ; do
	startlog
	# CSV auslesen
	line=$( less filter.csv | grep -v '#' | grep -v '^\W*$' | sort | uniq | tr -s '\t' | sed -ne "${n}p" )
	key=$(echo $line | cut -f1)
	searchvalue=$(echo $line | cut -f2)
	newkey=$(echo $line | cut -f3)
	newvalue=$(echo $line | cut -f4)

	simpelbot "$key" "$searchvalue" "$newkey" "$newvalue"
	succes=$?
	
	if [ $succes -gt 2 ] ; then exit ; fi
comment=""
done
